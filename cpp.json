{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"basic cpp template": {
		"prefix": "!!code",
		"body": [
"#include <bits/stdc++.h>\n//#define int long long int\n#define endl '\\n'\n#define all(c) c.begin(),c.end()\n#define mp(x,y) make_pair(x,y)\n#define eb emplace_back\n#define test int t; cin>>t; while(t--)\n#define tr(k,st,en) for(int k = st; k <= en ; k++)\n#define trb(k,en,st) for(int k = en; k >= st ; k--)\nusing namespace std;\n \ntypedef pair<int, int> pr;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<pr> vpr;\n\n//const int mod = 1e9+7;\n//const int inf = 9e18;\n \nint32_t main(){\n    std::ios::sync_with_stdio(false);\n    cin.tie(NULL); cout.tie(NULL);\n    #ifndef ONLINE_JUDGE\n        freopen(\"input.txt\", \"r\", stdin);\n        freopen(\"output.txt\", \"w\", stdout);\n    #endif\n    return 0;\n}\n"
	],
		"description": "basic cpp start"
	},
	"segment-tree": {
		"prefix": "segment-tree",
		"body": [
			"\ntemplate<typename T>\nclass SEGTREE {\nprivate:\n    /*##### enter the identity ######*/\n    T identity ;\npublic:\n    vector<T> tree;\n    int sz;\n    SEGTREE(int n, T *arr){\n        sz = n;\n        tree.resize(4*n+1);\n        buildTreeHelper(0,n-1,1,arr);\n    }\n    /*##### complete the merge ######*/\n    T merge(T op1,T op2){\n        T temp = max(op1,op2);\n        return temp;\n    }\n    /*##### complete the get_node ######*/\n    T get_node(int val){\n        T temp = val;\n        return temp;\n    }\n    T buildTreeHelper(int ss,int ee, int index, int *arr){\n        if(ss == ee){\n            return tree[index] = get_node(arr[ss]);\n        }\n        int mid = (ss + ee)/2;\n        T op1 = buildTreeHelper(ss,mid,2*index,arr);\n        T op2 = buildTreeHelper(mid + 1, ee, 2*index + 1, arr);\n        return tree[index] = merge(op1, op2);\n    };\n    T update(int qs,int qe, int incr){\n        return updatehelper(qs, qe, 0, sz-1,incr , 1);\n    }\n    T query(int qs,int qe){\n        return queryhelper(qs, qe, 0, sz-1, 1);\n    }\n    T updatehelper(int qs,int qe,int ss,int se,int incr,int index){\n        // complete overlap\n        if(ss >= qs and se <= qe){\n            tree[index] = get_node(incr);\n            return tree[index];\n        }\n        // no overlap\n        if(qe < ss or qs > se){\n            return tree[index];\n        }\n        // partial overlap\n        int mid = (ss + se)/2;\n        T op1 = updatehelper(qs,qe,ss,mid,incr,2*index);\n        T op2 = updatehelper(qs,qe,mid+1,se,incr, 2*index +1);\n        return tree[index] = merge(op1, op2);\n    }\n    T queryhelper(int qs,int qe,int ss,int se,int index){\n        // complete overlap\n        if(ss >= qs and se <= qe){\n            return tree[index];\n        }\n        // no overlap\n        if(qe < ss or qs > se){\n            return identity;\n        }\n        int mid = (ss + se)/2;\n        T op1 = queryhelper(qs,qe,ss,mid,2*index);\n        T op2 = queryhelper(qs,qe,mid+1,se, 2*index +1);\n        return merge(op1, op2);\n    }\n};\n"
		],
		"description": "segment-tree"
	},
	"power function": {
		"prefix": "power",
		"body": [
			"int power(int a, int b)\n{\n    int ans = 1, x = a;\n    while (b > 0) {\n        if (b&1) {\n            ans = (ans * x)%mod;\n        }\n        x=(x*x)%mod;\n        b >>= 1;\n    }\n    return ans;\n}\n"
		],
		"description": "power in log(n)"
	},
	"gcd-lcm": {
		"prefix": "gcd",
		"body": [
			"int gcd(int first,int second){\n    if(second==0){\n        return first;\n    } else {\n        return gcd(second, first%second);\n    }\n}\nint lcm (int first, int second){\n    return (first*second)/gcd(first,second);\n}\n"
		],
		"description": "gcd"
	},
	"factorials": {
		"prefix": "factorials",
		"body": [
			"\nint MAX = 1000005;\nvector<int> factorial;\nvector<int> factorial_inv;\n\nint power(int a, int b){\n    int ans = 1, x = a;\n    while (b > 0) {\n        if (b&1) {\n            ans = (ans * x)%mod;\n        }\n        x= (x*x) %mod;\n        b >>= 1;\n    }\n    return ans;\n}\n\nint modinv(int x){\n    return power(x,mod-2);\n}\n\nvoid fillfact(){\n    factorial.resize(MAX+1);\n    factorial_inv.resize(MAX+1);\n    factorial[0] = 1;\n    tr(i,1,MAX){\n        factorial[i] = (factorial[i-1] * i)% mod;\n    }\n    factorial_inv[MAX] = modinv(factorial[MAX]);\n    trb(i,MAX-1,0){\n        factorial_inv[i] = (factorial_inv[i+1] * (i+1))%mod;\n    }\n}\n\nint ncr(int n,int r){\n    if(n < r or r < 0)\n        return 0;\n    return ((((factorial[n] * factorial_inv[r]) % mod) * factorial_inv[n-r])%mod);\n}\n\n"
		],
		"description": "factorials"
	},
	"Bigint": {
		"prefix": "bigint",
		"body": [
			"struct bigint{\n    static const int LEN = 60;\n    static const int BIGMOD = 10000;\n    int s;            // sign of big integer\n    int vl, v[LEN];    // vl is length of v array\n    bigint() : s(1) { vl = 0; }   // eg. bigint x;\n    \n    bigint(long long a) {            // eg. bigint x(a);\n        s = 1; vl = 0;\n        if (a < 0) { s = -1; a = -a; }\n        while (a) {\n            push_back(a % BIGMOD);\n            a /= BIGMOD;\n        }\n    }\n    \n    bigint(string str) {            // eg. bigint x(str);\n        s = 1; vl = 0;\n        int stPos = 0, num = 0;\n        if (!str.empty() && str[0] == '-') {\n            stPos = 1;\n            s = -1;\n        }\n        for (int i=(int)str.length()-1, q=1; i>=stPos; i--) {\n            num += (str[i] - '0') * q;\n            if ((q *= 10) >= BIGMOD) {\n                push_back(num);\n                num = 0; q = 1;\n            }\n        }\n        if (num) push_back(num);\n    }\n    int len() const {\n        return vl;\n    }\n    \n    bool empty() const { return len() == 0; }\n    \n    void push_back(int x) {\n        v[vl++] = x;\n    }\n    \n    void pop_back() {\n        vl--;\n    }\n    \n    int back() const {\n        return v[vl-1];\n    }\n    \n    void n() {\n        while (!empty() && !back()) pop_back();\n    }\n    \n    void resize(int nl) {\n        vl = nl;\n        memset(v,0,sizeof(int)*vl);\n    }\n    void print() const {\n        if (empty()) { putchar('0'); return; }\n        if (s == -1) putchar('-');\n        printf(\"%d\", back());\n        for (int i=len()-2; i>=0; i--) printf(\"%.4d\",v[i]);\n    }\n    \n    friend std::ostream& operator << (std::ostream& out, const bigint &a) {\n        if (a.empty()) { out << \"0\"; return out; }\n        if (a.s == -1) out << \"-\";\n        out << a.back();\n        for (int i=a.len()-2; i>=0; i--) {\n            char str[10];\n            snprintf(str, 5, \"%.4d\", a.v[i]);\n            out << str;\n        }\n        return out;\n    }\n    int compare(const bigint &b)const {\n        if (s != b.s) return s - b.s;\n        if (s == -1) return -(-*this).compare(-b);\n        if (len() != b.len()) return len()-b.len();//int\n        for (int i=len()-1; i>=0; i--)\n            if (v[i]!=b.v[i]) return v[i]-b.v[i];\n        return 0;\n    }\n    bool operator < (const bigint &b)const{ return compare(b)<0; }\n    bool operator <= (const bigint &b)const{ return compare(b)<=0; }\n    bool operator == (const bigint &b)const{ return compare(b)==0; }\n    bool operator != (const bigint &b)const{ return compare(b)!=0; }\n    bool operator > (const bigint &b)const{ return compare(b)>0; }\n    bool operator >= (const bigint &b)const{ return compare(b)>=0; }\n    bigint operator - () const {\n        bigint r = (*this);\n        r.s = -r.s;\n        return r;\n    }\n    bigint operator + (const bigint &b) const {\n        if (s == -1) return -(-(*this)+(-b));\n        if (b.s == -1) return (*this)-(-b);\n        bigint r;\n        int nl = max(len(), b.len());\n        r.resize(nl + 1);\n        for (int i=0; i<nl; i++) {\n            if (i < len()) r.v[i] += v[i];\n            if (i < b.len()) r.v[i] += b.v[i];\n            if(r.v[i] >= BIGMOD) {\n                r.v[i+1] += r.v[i] / BIGMOD;\n                r.v[i] %= BIGMOD;\n            }\n        }\n        r.n();\n        return r;\n    }\n    bigint operator - (const bigint &b) const {\n        if (s == -1) return -(-(*this)-(-b));\n        if (b.s == -1) return (*this)+(-b);\n        if ((*this) < b) return -(b-(*this));\n        bigint r;\n        r.resize(len());\n        for (int i=0; i<len(); i++) {\n            r.v[i] += v[i];\n            if (i < b.len()) r.v[i] -= b.v[i];\n            if (r.v[i] < 0) {\n                r.v[i] += BIGMOD;\n                r.v[i+1]--;\n            }\n        }\n        r.n();\n        return r;\n    }\n    bigint operator * (const bigint &b) {\n        bigint r;\n        r.resize(len() + b.len() + 1);\n        r.s = s * b.s;\n        for (int i=0; i<len(); i++) {\n            for (int j=0; j<b.len(); j++) {\n                r.v[i+j] += v[i] * b.v[j];\n                if(r.v[i+j] >= BIGMOD) {\n                    r.v[i+j+1] += r.v[i+j] / BIGMOD;\n                    r.v[i+j] %= BIGMOD;\n                }\n            }\n        }\n        r.n();\n        return r;\n    }\n    bigint operator / (const bigint &b) {\n        bigint r;\n        r.resize(max(1, len()-b.len()+1));\n        int oriS = s;\n        bigint b2 = b; // b2 = abs(b)\n        s = b2.s = r.s = 1;\n        for (int i=r.len()-1; i>=0; i--) {\n            int d=0, u=BIGMOD-1;\n            while(d<u) {\n                int m = (d+u+1)>>1;\n                r.v[i] = m;\n                if((r*b2) > (*this)) u = m-1;\n                else d = m;\n            }\n            r.v[i] = d;\n        }\n        s = oriS;\n        r.s = s * b.s;\n        r.n();\n        return r;\n    }\n    bigint operator % (const bigint &b) {\n        return (*this)-(*this)/b*b;\n    }\n};\n"
		],
		"description": "Bigint"
	},
	"Binary search": {
		"prefix": "bsearch",
		"body": [
			"int search(int n,int *arr){\n  int a = INT_MAX;\n  int p = -1000000007;\n  for (; a >= 1; a/=2) {\n    while ((p+a) < n and func(arr,n,p+a)) {\n      p+=a;\n    }\n  }\n  return p;\n}\n"
		],
		"description": "binary search"
	},
	"Bredth-first-search": {
		"prefix": "bfs",
		"body": [
			"void bfs(int x){\n    queue<int> q;\n    q.push(x);\n    visited[x] = true;\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        std::cout << node << \"->\";\n        for (auto& nbr : nbrs[node]) {\n            if (!visited[nbr]) {\n                q.push(nbr);\n                // do something\n                visited[nbr] = true;\n            }\n        }\n    }\n}\n"
		],
		"description": "Bredth-first-search"
	},
	"graph-starter": {
		"prefix": "graph",
		"body": [
			"#include <bits/stdc++.h>\n//#define int long long int\n#define endl '\n'\n#define all(c) c.begin(),c.end()\n#define mp(x,y) make_pair(x,y)\n#define mem(a,val) memset(a,val,sizeof(a))\n#define eb emplace_back\n#define test int t; cin>>t; while(t--)\n#define tr(k,st,en) for(int k = st; k <= en ; k++)\n#define trb(k,en,st) for(int k = en; k >= st ; k--)\n\nusing namespace std;\n\ntypedef pair<int, int> pr;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<pr> vpr;\n//typedef list<pr> lpr;\n\n//const int mod = 1000000007;\n//const int inf = 1000000000000000001;\nconst int MX = 100010; // maximum no. of nodes in graph\n\nvector<bool> visited;\nint n;\nvector<list<int>> nbrs;\n\nvoid solve(){\n    for(int i=0; i<MX+1; i++){\n        nbrs[i].clear();\n    }\n    fill(all(visited),0);\n    \n    int m;\n    cin>>n>>m;\n    \n    for(int i = 1 ; i <= m ; i++){\n        int u,v;\n        cin>>u>>v;\n        nbrs[u].eb(v);\n        nbrs[v].eb(u);\n    }\n    /*###### start code here ######*/\n    \n    \n    \n    return;\n}\n\nint32_t main()\n{\n    std::ios::sync_with_stdio(false);\n    cin.tie(NULL); cout.tie(NULL);\n    nbrs.resize(MX + 1);\n    visited.resize(MX+1);\n    test{\n        solve();\n    }\n    return 0;\n}\n\n\n\n\n"
		],
		"description": "graph-starter-template"
	},
	"depth-first-search": {
		"prefix": "dfs",
		"body": [
			"void dfs(int x){\n    visited[x]=true;\n    for(auto& nbr : nbrs[x]){\n        if(visited[nbr]==false){\n            dfs(nbr);\n        }\n    }\n}\n"
		],
		"description": "depth-first-search"
	},
	"dijkstra-min-path": {
		"prefix": "dijkstra",
		"body": [
			"int dijkstra(int src, int dest){\n    vi dist(n + 1, inf);\n    dist[src] = 0;\n    \n    priority_queue<pr> pq;\n    pq.push(mp(0,src));\n    while (pq.size() > 0) {\n        auto [node_dis, node] = pq.top();\n        pq.pop();\n        if(node_dis != dist[node]) continue;\n        for(auto [nbr, dis] : nbrs[node]){\n            dis += node_dis;\n            if(dist[nbr] > dis){\n                pq.push(mp(dis,nbr));\n                dist[nbr] = dis;\n            }\n        }\n    }\n    return dist[dest];\n}\n"
		],
		"description": "dijkstra-min-path"
	},
	"disjoint-set-union": {
		"prefix": "dsu",
		"body": [
			"class DSU{\npublic:\n    vi parent;\n    vi urank;\n    DSU(int MAX = 10001){\n        parent.resize(MAX);\n        urank.assign(MAX,0);\n        tr(i,0,MAX-1){\n            parent[i] = i;\n        }\n    }\n    int find(int x){\n        return parent[x] != x ? parent[x] = find(parent[x]) : x;\n    }\n    void join(int x, int y){\n        int xroot = find(x);\n        int yroot = find(y);\n        if( urank[xroot] <= urank[yroot] ){\n            parent[xroot] = yroot ;\n            urank[yroot] = urank[yroot] + urank[xroot] ;\n        } else {\n            parent[yroot] = xroot;\n            urank[xroot] = urank[xroot] + urank[yroot] ;\n        }\n    }\n};\n"
		],
		"description": "disjoint-set-union"
	},
	"matrix-exponentiation": {
		"prefix": "matrix-expo",
		"body": [
			"int sm;\n\nvoid add_self(int& a, int b){\n    a = a+b;\n    if (a >= mod) {\n        a-=mod;\n    }\n}\n\nint mul(int a, int b){\n    int c = a*b;\n    return c % mod;\n}\n\nstruct Matrix {\n    vector<vector<int>> t;\n    Matrix(){\n        t.assign(sm, vector<int>(sm, 0));\n    }\n    Matrix operator * (Matrix& b){\n        Matrix c;\n        tr(i,0, sm-1){\n            tr(j,0,sm-1){\n                tr(k,0,sm-1){\n                    add_self(c.t[i][j] , mul(t[i][k] ,b.t[k][j]));\n                }\n            }\n        }\n        return c;\n    }\n};\nMatrix power(Matrix x, int k){\n    Matrix ans;\n    tr(i,0,sm-1){\n        ans.t[i][i] = 1;\n    }\n    while (k) {\n        if (k%2) {\n            ans = ans * x;\n        }\n        x = x*x;\n        k/=2;\n    }\n    return ans;\n}\n"
		],
		"description": "matrix-exponentiation"
	},
	"root a tree": {
		"prefix": "root-tree",
		"body": [
			"// add rooted.resize(MX+1); in main\nvector<list<int>> rooted;\nvoid root_it(int node){\n    visited[node] = true;\n    for(auto& nbr : nbrs[node]){\n        if(visited[nbr] == false){\n            root_it(nbr);\n            rooted[node].eb(nbr);\n        }\n    }\n}\n"
		],
		"description": "root a tree"
	},
	"get-time-of-execution": {
		"prefix": "exe-time",
		"body": [
			"std::chrono::time_point<std::chrono::high_resolution_clock> start, end;\nstart = std::chrono::high_resolution_clock::now();\n    /*\n    Code goes here\n    */\nend = std::chrono::high_resolution_clock::now();\nsize_t elapsed_time = std::chrono::duration_cast<std::chrono::milliseconds>(end-start).count();\ncout << \"\\\\nElapsed Time: \" << elapsed_time << \"ms\\\\n\";\n"
		],
		"description": "get-time-of-execution"
	},
}
